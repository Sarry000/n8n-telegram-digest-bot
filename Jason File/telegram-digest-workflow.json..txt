{
  "name": "My workflow",
  "nodes": [
    {
      "parameters": {
        "jsCode": "// Get the raw data from the HTTP Request\nconst data = $input.item.json;\n\n// Get the timestamp for 24 hours ago\nconst twentyFourHoursAgo = Date.now() - (24 * 60 * 60 * 1000);\n\n// Filter messages to only include those from the last 24 hours\n// and format them into a clean transcript.\nconst transcript = data.result\n  .filter(update => {\n    // Ensure the message exists and has a date\n    if (!update.message || !update.message.date) {\n      return false;\n    }\n    // Telegram's date is in seconds, convert to milliseconds\n    const messageDate = update.message.date * 1000;\n    return messageDate > twentyFourHoursAgo && update.message.text;\n  })\n  .map(update => {\n    const user = update.message.from.first_name || 'Unknown User';\n    const text = update.message.text;\n    return `${user}: ${text}`;\n  })\n  .join('\\n');\n\n// Return the final transcript. If it's empty, return a message.\nif (transcript.length === 0) {\n  return [{ json: { transcript: \"No new messages in the last 24 hours.\" } }];\n}\n\nreturn [{ json: { transcript: transcript } }];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        0,
        0
      ],
      "id": "4edabe7b-8281-4d6f-9c32-66cf916181d0",
      "name": "Code"
    },
    {
      "parameters": {
        "modelId": {
          "__rl": true,
          "value": "models/gemini-1.5-flash-latest",
          "mode": "list",
          "cachedResultName": "models/gemini-1.5-flash-latest"
        },
        "messages": {
          "values": [
            {
              "content": "=Analyze the following Telegram chat transcript. If the transcript says there were no new messages, just write \"No digest to generate today.\" Otherwise, create a \"Daily Digest\" with the following sections in well-formatted markdown:\n\n### 🌟 Top Conversation Topics\n- *Provide a bulleted list of the main topics.*\n\n### 🔗 Key Links Shared\n- *List any important links that were shared. If none, write \"No links were shared.\"*\n\n### ❓ Unanswered Questions\n- *List any questions that were asked but not answered. If none, write \"All questions seem to be answered.\"*\n\n### 😊 Overall Sentiment\n- *A one or two-word summary of the chat's mood.*\n\nHere is the transcript:\n{{ $('Code').item.json.transcript }}"
            }
          ]
        },
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.googleGemini",
      "typeVersion": 1,
      "position": [
        192,
        224
      ],
      "id": "264f528e-8242-420a-ba6b-1ee88670918e",
      "name": "Message a model",
      "credentials": {
        "googlePalmApi": {}
      }
    },
    {
      "parameters": {
        "chatId": "-4972030767",
        "text": "={{ $json.text }}",
        "additionalFields": {
          "parse_mode": "MarkdownV2"
        }
      },
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1.2,
      "position": [
        848,
        192
      ],
      "id": "0ec55896-0b1d-458e-910d-6ea3af0b804a",
      "name": "Send a text message",
      "webhookId": "feb0d2b2-b78e-49b2-8231-ae94b93f27af",
      "credentials": {
        "telegramApi": {}
      }
    },
    {
      "parameters": {
        "jsCode": "const escapeMarkdownV2 = (text) => {\n  return text\n    .replace(/_/g, '\\\\_')\n    .replace(/\\*/g, '\\\\*')\n    .replace(/\\[/g, '\\\\[')\n    .replace(/\\]/g, '\\\\]')\n    .replace(/\\(/g, '\\\\(')\n    .replace(/\\)/g, '\\\\)')\n    .replace(/~/g, '\\\\~')\n    .replace(/`/g, '\\\\`')\n    .replace(/>/g, '\\\\>')\n    .replace(/#/g, '\\\\#')\n    .replace(/\\+/g, '\\\\+')\n    .replace(/-/g, '\\\\-')\n    .replace(/=/g, '\\\\=')\n    .replace(/\\|/g, '\\\\|')\n    .replace(/{/g, '\\\\{')\n    .replace(/}/g, '\\\\}')\n    .replace(/\\./g, '\\\\.')\n    .replace(/!/g, '\\\\!');\n};\nreturn {\n  json: {\n    text: escapeMarkdownV2($('Message a model').first().json.content.parts[0].text)\n  }\n}\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        608,
        240
      ],
      "id": "165caced-b0fe-4058-bbbf-3867d7e1f3a9",
      "name": "Code1"
    },
    {
      "parameters": {
        "url": "https://api.telegram.org/bot<YOUR_TELEGRAM_TOKEN_HERE>/getUpdates",
        "options": {
          "timeout": 3000
        }
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -224,
        192
      ],
      "id": "22bfd0d6-b551-43c0-970a-c7eb54560f76",
      "name": "HTTP Request"
    },
    {
      "parameters": {
        "rule": {
          "interval": [
            {}
          ]
        }
      },
      "type": "n8n-nodes-base.scheduleTrigger",
      "typeVersion": 1.2,
      "position": [
        -480,
        48
      ],
      "id": "cbd19897-d5b5-4503-8813-8598a7228b06",
      "name": "Schedule Trigger"
    }
  ],
  "pinData": {},
  "connections": {
    "Code": {
      "main": [
        [
          {
            "node": "Message a model",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Message a model": {
      "main": [
        [
          {
            "node": "Code1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code1": {
      "main": [
        [
          {
            "node": "Send a text message",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "HTTP Request": {
      "main": [
        [
          {
            "node": "Code",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Schedule Trigger": {
      "main": [
        [
          {
            "node": "HTTP Request",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": false,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "a9820bf5-362f-4736-b7bd-5af750334b4a",
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "f788353da403ad9f1a990e5e3bdbd1aaee4f3b9ca3a10ae706ed6bfcd587ad4c"
  },
  "id": "7uhOpedRRQ58ItPG",
  "tags": []
}
